{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "KeyName": {
      "Description": "The ssh keypair used to access the buildkite instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "BuildkiteOrgSlug": {
      "Description": "Your Buildkite organization slug",
      "Type": "String"
    },
    "BuildkiteAgentToken": {
      "Description": "Your Buildkite agent token from Buildkite.com",
      "Type": "String",
      "NoEcho": "true"
    },
    "BuildkiteQueue": {
      "Description": "The queue metadata to register the agent with",
      "Type": "String",
      "Default": "elastic"
    },
    "DockerVersion": {
      "Description": "The docker version to run, depends on a matching tag on the buildkite-agent image",
      "Type": "String",
      "Default": "1.9"
    },
    "ProvisionBucket": {
      "Description": "An s3 bucket containing id_rsa_buildkite",
      "Type": "String"
    },
    "AuthorizedUsersUrl": {
      "Description": "Optional - An url to periodically download ssh authorized_keys from",
      "Type": "String",
      "Default": ""
    },
    "VpcId": {
      "Type": "String",
      "Description": "Optional - VPC Id of existing VPC. Leave blank to have a new VPC created",
      "Default": ""
    },
    "Subnets": {
      "Type": "CommaDelimitedList",
      "Description": "Optional - Comma separated list of three existing VPC Subnet Ids where ECS instances will run.  Required if setting VpcId.",
      "Default": ""
    },
    "AvailabilityZones": {
      "Type": "CommaDelimitedList",
      "Description": "Optional - Comma-delimited list of VPC availability zones in which to create subnets.  Required if setting VpcId.",
      "Default": ""
    },
    "InstanceType": {
      "Description": "The type of instance to use for the agent",
      "Type": "String",
      "Default": "m3.medium",
      "AllowedValues": [
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge"
      ]
    },
    "SpotPrice": {
      "Description": "An optional spot price to use for the agents, if 0 normal instances are used",
      "Type": "String",
      "Default": 0
    },
    "MaxSize": {
      "Description": "The maximum number of agents to launch",
      "Type": "Number",
      "Default": 6
    },
    "MinSize": {
      "Description": "The minumum number of agents to launch",
      "Type": "Number",
      "Default": 1
    },
    "AgentsPerHost": {
      "Description": "The number of buildkite agents to run per host",
      "Type": "Number",
      "Default": 6
    },
    "RootVolumeSize": {
      "Description": "Size of EBS volume for root filesystem in GB.",
      "Type": "Number",
      "Default": 250
    },
    "RootVolumeIops": {
      "Description": "Provisioned IOPS for the root volume. You get 3 free for each GB",
      "Type": "Number",
      "Default": 750
    },
    "SecurityGroupId": {
      "Type": "String",
      "Description": "Optional - Existing security group to associate the container instances. Creates one by default.",
      "Default": ""
    }
  },
  "Conditions": {
    "UseSpotInstances": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SpotPrice"
            },
            0
          ]
        }
      ]
    },
    "CreateVpcResources": {
      "Fn::Equals": [
        {
          "Ref": "VpcId"
        },
        ""
      ]
    },
    "CreateSecurityGroup": {
      "Fn::Equals": [
        {
          "Ref": "SecurityGroupId"
        },
        ""
      ]
    },
    "UseSpecifiedAvailabilityZones": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Join": [
                "",
                {
                  "Ref": "AvailabilityZones"
                }
              ]
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "IAMInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRole"
          }
        ]
      }
    },
    "IAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "IAMPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstancePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:PutMetricData",
                "cloudformation:DescribeStackResource",
                "ec2:DescribeTags"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:GetObjectVersion",
                "s3:ListBucket",
                "s3:ListBucketVersions"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "ProvisionBucket"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "IAMRole"
          }
        ]
      }
    },
    "AgentLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "SecurityGroups": [
          {
            "Fn::If": [
              "CreateSecurityGroup",
              {
                "Ref": "SecurityGroup"
              },
              {
                "Ref": "SecurityGroupId"
              }
            ]
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfile"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SpotPrice": {
          "Fn::If": [
            "UseSpotInstances",
            {
              "Ref": "SpotPrice"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": {
                "Ref": "RootVolumeSize"
              },
              "VolumeType": "gp2",
              "Iops": {
                "Ref": "RootVolumeIops"
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xv\n/usr/local/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r AgentLaunchConfiguration --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n/usr/local/bin/cfn-signal -e $? -r 'cfn-init finished' \\\n  --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource 'AgentAutoScaleGroup' --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "type": "S3",
            "roleName": {
              "Ref": "IAMRole"
            },
            "buckets": {
              "Ref": "ProvisionBucket"
            }
          }
        },
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/root/.ssh/id_rsa": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      "https://",
                      {
                        "Ref": "ProvisionBucket"
                      },
                      ".s3.amazonaws.com/id_rsa_buildkite"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root",
                "authentication": "S3AccessCreds"
              },
              "/home/ubuntu/buildkite/hooks/environment": {
                "content": "#!/bin/bash -eu\nif [[ -f ~/.docker/config.json || -f ~/.dockercfg ]] ; then\n  docker logout\nfi\nif [[ -n \"${DOCKER_HUB_AUTH:-}\" ]] ; then\n  echo \"DOCKER_HUB_AUTH is no longer supported, use DOCKER_HUB_USER, DOCKER_HUB_PASSWORD and DOCKER_HUB_EMAIL.\"\n  exit 1\nelif [[ -n \"${DOCKER_HUB_USER:-}\" && -n \"${DOCKER_HUB_PASSWORD:-}\" && -n \"${DOCKER_HUB_EMAIL:-}\" ]] ; then\n  echo \"~~~ Authenticating with docker hub as $DOCKER_HUB_USER\"\n  docker login --username=\"$DOCKER_HUB_USER\" --password=\"$DOCKER_HUB_PASSWORD\" --email=\"$DOCKER_HUB_EMAIL\"\nfi\necho \"~~~ Stopping existing docker containers\"\nif [[ $(docker ps -q | wc -l) -gt 0 ]] ; then\n  docker stop $(docker ps -q)\nfi\n",
                "mode": "000700",
                "owner": "ubuntu",
                "group": "ubuntu"
              },
              "/lib/systemd/system/ssh-agent.service": {
                "content": "[Unit]\nDescription=ssh-agent\nBefore=docker.service\n[Service]\nType=forking\nEnvironment=SSH_AUTH_SOCK=/ssh-agent\nExecStart=/usr/bin/ssh-agent -a $SSH_AUTH_SOCK\nExecStartPost=/usr/bin/ssh-add /root/.ssh/id_rsa\n[Install]\nWantedBy=default.target\n",
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/home/ubuntu/docker-compose.yml": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "buildkite:\n  image: buildkite/agent:dind-",
                      {
                        "Ref": "DockerVersion"
                      },
                      "\n  privileged: true\n  environment:\n    - BUILDKITE_AGENT_TOKEN=",
                      {
                        "Ref": "BuildkiteAgentToken"
                      },
                      "\n    - BUILDKITE_AGENT_META_DATA=queue=",
                      {
                        "Ref": "BuildkiteQueue"
                      },
                      ",docker=",
                      {
                        "Ref": "DockerVersion"
                      },
                      "\n    - BUILDKITE_AGENT_NAME=elastic-%hostname-%n\n    - DOCKER_STORAGE_DRIVER=aufs\n    - SSH_AUTH_SOCK=/ssh-agent\n  volumes:\n    - /home/ubuntu/buildkite/hooks:/buildkite/hooks\n    - /ssh-agent:/ssh-agent\n  restart: always\n"
                    ]
                  ]
                },
                "mode": "000600",
                "owner": "ubuntu",
                "group": "ubuntu"
              },
              "/etc/cron.hourly/authorized_keys": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -eu\ntest -z \"",
                      {
                        "Ref": "AuthorizedUsersUrl"
                      },
                      "\" && exit 0\ncurl --silent -f \"",
                      {
                        "Ref": "AuthorizedUsersUrl"
                      },
                      "\" > /tmp/authorized_keys\nmv /tmp/authorized_keys /home/ubuntu/.ssh/authorized_keys\nchmod 600 /home/ubuntu/.ssh/authorized_keys\nchown ubuntu: /home/ubuntu/.ssh/authorized_keys\n"
                    ]
                  ]
                },
                "mode": "000700",
                "owner": "root",
                "group": "root"
              },
              "/etc/cron.d/cloudwatch": {
                "content": "*/2 * * * * root perl /usr/local/aws-scripts-mon/mon-put-instance-data.pl --mem-util --disk-space-util --disk-path=/ --disk-path=/var/lib/docker --from-cron\n",
                "mode": "000700",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "01-enable-ssh-agent-systemd": {
                "command": "systemctl daemon-reload\nsystemctl enable ssh-agent\nsystemctl start ssh-agent\n"
              },
              "02-install-buildkite": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "docker-compose -f /home/ubuntu/docker-compose.yml pull\ndocker-compose -f /home/ubuntu/docker-compose.yml up -d buildkite\ndocker-compose -f /home/ubuntu/docker-compose.yml scale buildkite=",
                      {
                        "Ref": "AgentsPerHost"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "03-fetch-authorized-users": {
                "command": "/etc/cron.hourly/authorized_keys"
              }
            }
          }
        }
      }
    },
    "AgentAutoScaleGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {
          "Fn::If": [
            "CreateVpcResources",
            [
              {
                "Ref": "Subnet0"
              },
              {
                "Ref": "Subnet1"
              },
              {
                "Ref": "Subnet2"
              }
            ],
            {
              "Ref": "Subnets"
            }
          ]
        },
        "LaunchConfigurationName": {
          "Ref": "AgentLaunchConfiguration"
        },
        "MinSize": {
          "Ref": "MinSize"
        },
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "Tags": [
          {
            "Key": "Role",
            "Value": "buildkite-agent",
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT20M",
          "Count": {
            "Ref": "MinSize"
          }
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": {
            "Ref": "MinSize"
          },
          "MaxBatchSize": 1,
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "AgentScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AgentAutoScaleGroup"
        },
        "Cooldown": 60,
        "ScalingAdjustment": 1
      }
    },
    "AgentScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AgentAutoScaleGroup"
        },
        "Cooldown": 60,
        "ScalingAdjustment": -1
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": 300,
        "EvaluationPeriods": 2,
        "Threshold": 90,
        "AlarmActions": [
          {
            "Ref": "AgentScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AgentAutoScaleGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": 300,
        "EvaluationPeriods": 2,
        "Threshold": 70,
        "AlarmActions": [
          {
            "Ref": "AgentScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AgentAutoScaleGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "CreateSecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to SSH",
        "VpcId": {
          "Fn::If": [
            "CreateVpcResources",
            {
              "Ref": "Vpc"
            },
            {
              "Ref": "VpcId"
            }
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Condition": "CreateVpcResources",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "Gateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Condition": "CreateVpcResources",
      "Properties": {
      }
    },
    "GatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Condition": "CreateVpcResources",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "Gateway"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "Subnet0": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "CreateVpcResources",
      "Properties": {
        "AvailabilityZone": {
          "Fn::If": [
            "UseSpecifiedAvailabilityZones",
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "AvailabilityZones"
                }
              ]
            },
            {
              "Fn::Select": [
                0,
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        },
        "CidrBlock": "10.0.1.0/24",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "CreateVpcResources",
      "Properties": {
        "AvailabilityZone": {
          "Fn::If": [
            "UseSpecifiedAvailabilityZones",
            {
              "Fn::Select": [
                1,
                {
                  "Ref": "AvailabilityZones"
                }
              ]
            },
            {
              "Fn::Select": [
                1,
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        },
        "CidrBlock": "10.0.2.0/24",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "CreateVpcResources",
      "Properties": {
        "AvailabilityZone": {
          "Fn::If": [
            "UseSpecifiedAvailabilityZones",
            {
              "Fn::Select": [
                2,
                {
                  "Ref": "AvailabilityZones"
                }
              ]
            },
            {
              "Fn::Select": [
                2,
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        },
        "CidrBlock": "10.0.3.0/24",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "Routes": {
      "Type": "AWS::EC2::RouteTable",
      "Condition": "CreateVpcResources",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "RouteDefault": {
      "Type": "AWS::EC2::Route",
      "Condition": "CreateVpcResources",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "Gateway"
        },
        "RouteTableId": {
          "Ref": "Routes"
        }
      }
    },
    "Subnet0Routes": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "CreateVpcResources",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet0"
        },
        "RouteTableId": {
          "Ref": "Routes"
        }
      }
    },
    "Subnet1Routes": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "CreateVpcResources",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "RouteTableId": {
          "Ref": "Routes"
        }
      }
    },
    "Subnet2Routes": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "CreateVpcResources",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet2"
        },
        "RouteTableId": {
          "Ref": "Routes"
        }
      }
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "c4.large": {
        "Arch": "HVM64EBS"
      },
      "c4.xlarge": {
        "Arch": "HVM64EBS"
      },
      "c4.2xlarge": {
        "Arch": "HVM64EBS"
      },
      "c4.4xlarge": {
        "Arch": "HVM64EBS"
      },
      "c4.8xlarge": {
        "Arch": "HVM64EBS"
      },
      "t2.micro": {
        "Arch": "HVM64EBS"
      },
      "t2.small": {
        "Arch": "HVM64EBS"
      },
      "t2.medium": {
        "Arch": "HVM64EBS"
      },
      "m3.medium": {
        "Arch": "HVM64EBS"
      },
      "m3.large": {
        "Arch": "HVM64EBS"
      },
      "m3.xlarge": {
        "Arch": "HVM64EBS"
      },
      "m3.2xlarge": {
        "Arch": "HVM64EBS"
      }
    },
    "AWSArch2AMI": {
      "us-east-1": {
        "HVM64EBS": "ami-ed700087"
      }
    }
  }
}
