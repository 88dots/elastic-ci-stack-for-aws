Conditions:
  RegionHas6Zones: !Equals [ !Ref "AWS::Region", "us-east-1" ] ]
  RegionHas3Zones: !Or [
    !Equals [ !Ref "AWS::Region", "us-east-2"],
    !Equals [ !Ref "AWS::Region", "us-west-2"],
    !Equals [ !Ref "AWS::Region", "eu-west-1"],
    !Equals [ !Ref "AWS::Region", "eu-central-1"],
    !Equals [ !Ref "AWS::Region", "ap-southeast-2"]
  ]

  HasNatGateway1: !And [ {Condition: CreateNatGateways }, { Condition: CreateVpcResources } ]
  HasNatGateway2: !And [ {Condition: CreateNatGateways }, { Condition: CreateVpcResources } ]

  HasPublicSubnet1: { Condition: CreateVpcResources }
  HasPublicSubnet2: { Condition: CreateVpcResources }
  HasPublicSubnet3: !And [ { Condition: CreateVpcResources }, !Not { Condition: UsePrivateSubnets }, !Or [ { Condition: RegionHas3Zones }, { Condition: RegionHas6Zones } ] ]
  HasPublicSubnet4: !And [ { Condition: CreateVpcResources }, !Not { Condition: UsePrivateSubnets }, { Condition: RegionHas6Zones } ]
  HasPublicSubnet5: !And [ { Condition: CreateVpcResources }, !Not { Condition: UsePrivateSubnets }, { Condition: RegionHas6Zones } ]
  HasPublicSubnet6: !And [ { Condition: CreateVpcResources }, !Not { Condition: UsePrivateSubnets }, { Condition: RegionHas6Zones } ]

  HasPrivateSubnet1: !And [ { Condition: CreateVpcResources }, { Condition: UsePrivateSubnets } ]
  HasPrivateSubnet2: !And [ { Condition: CreateVpcResources }, { Condition: UsePrivateSubnets } ]
  HasPrivateSubnet3: !And [ { Condition: CreateVpcResources }, { Condition: UsePrivateSubnets }, !Or [ { Condition: RegionHas3Zones }, { Condition: RegionHas6Zones } ] ]
  HasPrivateSubnet4: !And [ { Condition: CreateVpcResources }, { Condition: UsePrivateSubnets }, !Or [ { Condition: RegionHas6Zones } ] ]
  HasPrivateSubnet5: !And [ { Condition: CreateVpcResources }, { Condition: UsePrivateSubnets }, !Or [ { Condition: RegionHas6Zones } ] ]
  HasPrivateSubnet6: !And [ { Condition: CreateVpcResources }, { Condition: UsePrivateSubnets }, !Or [ { Condition: RegionHas6Zones } ] ]

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpcResources
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpcResources
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpcResources
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: HasPublicSubnet1
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 0, !Ref AvailabilityZones ],
        !Select [ 0, !GetAZs "" ]
      ]
      CidrBlock: 10.0.0.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: HasPublicSubnet2
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 1, !Ref AvailabilityZones ],
        !Select [ 1, !GetAZs "" ]
      ]
      CidrBlock: 10.0.32.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Condition: HasPublicSubnet3
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 2, !Ref AvailabilityZones ],
        !Select [ 2, !GetAZs "" ]
      ]
      CidrBlock: 10.0.128.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ3)

  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Condition: HasPublicSubnet4
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 3, !Ref AvailabilityZones ],
        !Select [ 3, !GetAZs "" ]
      ]
      CidrBlock: 10.0.160.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ4)

  PublicSubnet5:
    Type: AWS::EC2::Subnet
    Condition: HasPublicSubnet5
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 4, !Ref AvailabilityZones ],
        !Select [ 4, !GetAZs "" ]
      ]
      CidrBlock: 10.0.192.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ5)

  PublicSubnet6:
    Type: AWS::EC2::Subnet
    Condition: HasPublicSubnet6
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 5, !Ref AvailabilityZones ],
        !Select [ 5, !GetAZs "" ]
      ]
      CidrBlock: 10.0.224.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ6)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Condition: HasNatGateway1
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Condition: HasNatGateway2
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: HasNatGateway1
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: HasNatGateway2
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpcResources
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Condition: CreateVpcResources
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPublicSubnet1
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPublicSubnet2
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPublicSubnet3
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PublicSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPublicSubnet4
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet4

  PublicSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPublicSubnet5
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet5

  PublicSubnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPublicSubnet6
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet6

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: HasPrivateSubnet1
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 0, !Ref AvailabilityZones ],
        !Select [ 0, !GetAZs "" ]
      ]
      CidrBlock: 10.0.64.0/19
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: HasPrivateSubnet2
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 1, !Ref AvailabilityZones ],
        !Select [ 1, !GetAZs "" ]
      ]
      CidrBlock: 10.0.96.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: HasPrivateSubnet3
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 2, !Ref AvailabilityZones ],
        !Select [ 2, !GetAZs "" ]
      ]
      CidrBlock: 10.0.128.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Condition: HasPrivateSubnet4
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 3, !Ref AvailabilityZones ],
        !Select [ 3, !GetAZs "" ]
      ]
      CidrBlock: 10.0.160.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ4)

  PrivateSubnet5:
    Type: AWS::EC2::Subnet
    Condition: HasPrivateSubnet5
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 4, !Ref AvailabilityZones ],
        !Select [ 4, !GetAZs "" ]
      ]
      CidrBlock: 10.0.192.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ5)

  PrivateSubnet6:
    Type: AWS::EC2::Subnet
    Condition: HasPrivateSubnet6
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !If [
        UseSpecifiedAvailabilityZones,
        !Select [ 5, !Ref AvailabilityZones ],
        !Select [ 5, !GetAZs "" ]
      ]
      CidrBlock: 10.0.224.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ6)

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Condition: HasPrivateSubnet1
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ1)

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: HasPrivateSubnet2
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ2)

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Condition: HasPrivateSubnet3
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ3)

  PrivateRouteTable4:
    Type: AWS::EC2::RouteTable
    Condition: HasPrivateSubnet4
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ4)

  PrivateRouteTable5:
    Type: AWS::EC2::RouteTable
    Condition: HasPrivateSubnet5
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ5)

  PrivateRouteTable6:
    Type: AWS::EC2::RouteTable
    Condition: HasPrivateSubnet6
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ6)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Condition: HasPrivateSubnet1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Condition: HasPrivateSubnet2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Condition: HasPrivateSubnet3
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  DefaultPrivateRoute4:
    Type: AWS::EC2::Route
    Condition: HasPrivateSubnet4
    Properties:
      RouteTableId: !Ref PrivateRouteTable4
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  DefaultPrivateRoute5:
    Type: AWS::EC2::Route
    Condition: HasPrivateSubnet5
    Properties:
      RouteTableId: !Ref PrivateRouteTable5
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  DefaultPrivateRoute6:
    Type: AWS::EC2::Route
    Condition: HasPrivateSubnet6
    Properties:
      RouteTableId: !Ref PrivateRouteTable6
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPrivateSubnet1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPrivateSubnet2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPrivateSubnet3
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPrivateSubnet4
    Properties:
      RouteTableId: !Ref PrivateRouteTable4
      SubnetId: !Ref PrivateSubnet4

  PrivateSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPrivateSubnet5
    Properties:
      RouteTableId: !Ref PrivateRouteTable5
      SubnetId: !Ref PrivateSubnet5

  PrivateSubnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasPrivateSubnet6
    Properties:
      RouteTableId: !Ref PrivateRouteTable6
      SubnetId: !Ref PrivateSubnet6
