
## Provides the infrastructure for a scalable buildkite cluster

Parameters:
  KeyName:
    Description: The ssh keypair used to access the buildkite instances
    Type: AWS::EC2::KeyPair::KeyName

  BuildkiteOrgSlug:
    Description: Your Buildkite organization slug
    Type: String

  BuildkiteAgentToken:
    Description: Your Buildkite agent token from Buildkite.com
    Type: String
    NoEcho: true

  BuildkiteQueue:
    Description: The queue metadata to register the agent with
    Type: String
    Default: elastic

  ProvisionBucket:
    Description: An s3 bucket containing id_rsa_buildkite
    Type: String
    Default: ""

  AuthorizedUsersUrl:
    Description: Optional - An url to periodically download ssh authorized_keys from
    Type: String
    Default: ""

  VpcId:
    Type: String
    Description: Optional - VPC Id of existing VPC. Leave blank to have a new VPC created
    Default: ""

  Subnets:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of three existing VPC Subnet Ids where ECS instances will run.  Required if setting VpcId.
    Default: ""

  AvailabilityZones:
    Type: CommaDelimitedList
    Description: Optional - Comma-delimited list of VPC availability zones in which to create subnets.  Required if setting VpcId.
    Default: ""

  InstanceType:
    Description: The type of instance to use for the agent
    Type: String
    Default: t2.micro
    AllowedValues:
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge

  SpotPrice:
    Description: An optional spot price to use for the agents, if 0 normal instances are used
    Type: String
    Default: 0

  MaxSize:
    Description: The maximum number of agents to launch
    Type: Number
    Default: 6

  MinSize:
    Description: The minumum number of agents to launch
    Type: Number
    Default: 1

  RootVolumeSize:
    Description: Size of EBS volume for root filesystem in GB.
    Type: Number
    Default: 250

  RootVolumeIops:
    Description: Provisioned IOPS for the root volume. You get 3 free for each GB
    Type: Number
    Default: 750

  SecurityGroupId:
    Type: String
    Description: Optional - Existing security group to associate the container instances. Creates one by default.
    Default: ""

  ImageId:
    Type: AWS::EC2::Image::Id
    Description: The AMI to use, otherwise uses the mapping built in
    Default: ""

Conditions:
    UseSpotInstances:
      !Not [ !Equals [ $(SpotPrice), 0 ] ]

    CreateVpcResources:
      !Equals [ $(VpcId), "" ]

    CreateSecurityGroup:
      !Equals [ $(SecurityGroupId), "" ]

    UseSpecifiedAvailabilityZones:
      !Not [ !Equals [ !Join [ "", $(AvailabilityZones) ], "" ]  ]

    UseProvisionBucket:
      !Not [ !Equals [ $(ProvisionBucket), "" ] ]

    UseDefaultAMI:
      !Equals [ $(ImageId), "" ]

Resources:
  # Allow ec2 instances to assume a role and be granted the IAMPolicies
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ $(IAMRole) ]

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudformation:DescribeStackResource
              - ec2:DescribeTags
            Resource: "*"
      Roles:
        - $(IAMRole)

  ProvisionBucketPolicies:
    Type: AWS::IAM::Policy
    Condition: UseProvisionBucket
    Properties:
      PolicyName: ProvisionBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:ListBucket
              - s3:ListBucketVersions
            Resource:
              - "arn:aws:s3:::$(ProvisionBucket)/id_rsa_buildkite"
              - "arn:aws:s3:::$(ProvisionBucket)/*.packer"
      Roles:
        - $(IAMRole)

  AgentLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      SecurityGroups: [ !If [ "CreateSecurityGroup", $(SecurityGroup), $(SecurityGroupId) ] ]
      KeyName : $(KeyName)
      IamInstanceProfile: $(IAMInstanceProfile)
      InstanceType: $(InstanceType)
      SpotPrice: !If [ "UseSpotInstances", $(SpotPrice), '$(AWS::NoValue)' ]
      ImageId : !If [
        "UseDefaultAMI",
        "$(AWSRegion2AMI[$(AWS::Region)][AMI])",
        $(ImageId)
      ]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs: { VolumeSize: $(RootVolumeSize), VolumeType: gp2, Iops: $(RootVolumeIops) }
      UserData: !Base64 |
        #!/bin/bash -xv
        exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
        cfn-init -s $(AWS::StackId) -r AgentLaunchConfiguration --region $(AWS::Region)
        cfn-signal -e \$? -r 'cfn-init finished' \
          --stack $(AWS::StackName) --resource 'AgentAutoScaleGroup' --region $(AWS::Region)

    # Metadata:
      # see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      # AWS::CloudFormation::Init:
        # config:
          # commands:
            # 01-download-github-key:
            #   test: test -n "$(ProvisionBucket)"
            #   command: |
            #     aws s3 cp s3://$(ProvisionBucket)/id_rsa_buildkite /root/.ssh/id_rsa
            #     chmod 0600 /root/.ssh/id_rsa
            # 02-install-buildkite:
            #   command: |
            #     sed -i "s/$(BuildkiteAgentToken)/INSERT-YOUR-AGENT-TOKEN-HERE/g" /etc/buildkite-agent/buildkite-agent.cfg
            #     service buildkite-agent start
            # 03-fetch-authorized-users:
            #   test: test -z "$(AuthorizedUsersUrl)" && exit 0
            #   command: |
            #     cat << EOF > /etc/cron.hourly/authorized_keys
            #     curl --silent -f "$(AuthorizedUsersUrl)" > /tmp/authorized_keys
            #     mv /tmp/authorized_keys /home/ec2-user/.ssh/authorized_keys
            #     chmod 600 /home/ec2-user/.ssh/authorized_keys
            #     chown ec2-user: /home/ec2-user/.ssh/authorized_keys
            #     EOF
            #     chmod +x /etc/cron.hourly/authorized_keys
            #     /etc/cron.hourly/authorized_keys

  AgentAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !If [
        "CreateVpcResources",
        [ $(Subnet0), $(Subnet1), $(Subnet2) ],
        $(Subnets)
      ]
      LaunchConfigurationName: $(AgentLaunchConfiguration)
      MinSize: $(MinSize)
      MaxSize: $(MaxSize)
      Tags:
        - { Key: Role, Value: buildkite-agent, PropagateAtLaunch: true }
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: $(MinSize)
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: $(MinSize)
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSecurityGroup
    Properties:
      GroupDescription: Enable access to SSH
      VpcId: !If [ "CreateVpcResources", $(Vpc), $(VpcId) ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

